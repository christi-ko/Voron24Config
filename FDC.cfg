[gcode_macro _FDC]

#variable_z_height_temps: {22.5: 0.0003166796725523764, 22.6: 0.0003166796725523764, 22.7: 0.0003166796725523764, 22.8: 0.0003166796725523764, 22.9: 0.0003166796725523764, 23.0: 0.0003166796725523764, 23.1: 0.0003166796725523764, 23.2: 0.0003166796725523764, 23.3: 0.0003166796725523764, 23.4: 0.0003166796725523764, 23.5: 0.0003166796725523764, 23.6: -3.031338921687137e-05, 23.7: -2.265224787797608e-05, 23.8: -1.527008204480504e-05, 23.9: -8.161620884423429e-06, 24.0: -1.3216329877370242e-06, 24.1: 5.255073630508174e-06, 24.2: 1.1573651531725888e-05, 24.3: 1.7639213853489237e-05, 24.4: 2.3456834309531225e-05, 24.5: 2.903154718974458e-05, 24.6: 3.4368347360181424e-05, 24.7: 3.947219026305377e-05, 24.8: 4.434799191673297e-05, 24.9: 4.900062891575064e-05, 25.0: 5.343493843079725e-05, 25.1: 5.76557182087236e-05, 25.2: 6.166772657254004e-05, 25.3: 6.547568242141588e-05, 25.4: 6.908426523068135e-05, 25.5: 7.249811505182489e-05, 25.6: 7.572183251249595e-05, 25.7: 7.875997881650232e-05, 25.8: 8.161707574381332e-05, 25.9: 8.429760565055542e-05, 26.0: 8.680601146901696e-05, 26.1: 8.914669670764493e-05, 26.2: 9.132402545104497e-05, 26.3: 9.334232235998566e-05, 26.4: 9.5205872671391e-05, 26.5: 9.691892219834816e-05, 26.6: 9.848567733010188e-05, 26.7: 9.991030503205748e-05, 26.8: 0.00010119693284577915, 26.9: 0.0001023496488889923, 27.0: 0.00010337250185557881, 27.1: 0.00010426950101558594, 27.2: 0.00010504461621521372, 27.3: 0.00010570177787682647, 27.4: 0.00010624487699894712, 27.5: 0.00010667776515625683, 27.6: 0.00010700425449959843, 27.7: 0.00010722811775597469, 27.8: 0.00010735308822854483, 27.9: 0.00010738285979663108, 28.0: 0.0001073210869157121, 28.1: 0.00010717138461743001, 28.2: 0.00010693732850958681, 28.3: 0.00010662245477613711, 28.4: 0.00010623026017720283, 28.5: 0.00010576420204906232, 28.6: 0.00010522769830415783, 28.7: 0.00010462412743107805, 28.8: 0.00010395682849459204, 28.9: 0.00010322910113561099, 29.0: 0.00010244420557121298, 29.1: 0.00010160536259463428, 29.2: 0.00010071575357527545, 29.3: 9.977852045868398e-05, 29.4: 9.879676576658464e-05, 29.5: 9.777355259684827e-05, 29.6: 9.671190462351171e-05, 29.7: 9.561480609676914e-05, 29.8: 9.448520184297555e-05, 29.9: 9.332599726464153e-05, 30.0: 9.214005834044629e-05, 30.1: 9.093021162522117e-05, 30.2: 8.96992442499531e-05, 30.3: 8.844990392180979e-05, 30.4: 8.718489892408417e-05, 30.5: 8.59068981162647e-05, 30.6: 8.461853093397805e-05, 30.7: 8.332238738900481e-05, 30.8: 8.20210180693141e-05, 30.9: 8.07169341390055e-05, 31.0: 7.941259275029162e-05, 31.1: 7.811048457183854e-05, 31.2: 7.681291496788433e-05, 31.3: 7.552229575940889e-05, 31.4: 7.424092640327153e-05, 31.5: 7.297108152053405e-05, 31.6: 7.171499630842081e-05, 31.7: 7.047486654033173e-05, 31.8: 6.925284856580238e-05, 31.9: 6.805105931054385e-05, 32.0: 6.687157627642982e-05, 32.1: 6.571643754147392e-05, 32.2: 6.458764175987838e-05, 32.3: 6.348714816197237e-05, 32.4: 6.241687655427278e-05, 32.5: 6.137870731944429e-05, 32.6: 6.037448141629938e-05, 32.7: 5.9406000379842554e-05, 32.8: 5.847502632119663e-05, 32.9: 5.758328192768426e-05, 33.0: 5.673245046275595e-05, 33.1: 5.592417576604121e-05, 33.2: 5.51600622533243e-05, 33.3: 5.444167491653641e-05, 33.4: 5.377053932379902e-05, 33.5: 5.3148141619350185e-05, 33.6: 5.25759285236304e-05, 33.7: 5.205530733321147e-05, 33.8: 5.158764592083642e-05, 33.9: 5.117427273540823e-05, 34.0: 5.081647680198198e-05, 34.1: 5.0515507721780525e-05, 34.2: 5.0272575672184044e-05, 34.3: 5.008885140672485e-05, 34.4: 4.996546625510474e-05, 34.5: 4.990351212319673e-05, 34.6: 4.9904041492991255e-05, 34.7: 4.996806742268989e-05, 34.8: 5.00965635466151e-05, 34.9: 5.029046407526751e-05, 35.0: 5.055066379532243e-05, 35.1: 5.087801806955179e-05, 35.2: 5.127334283698548e-05, 35.3: 5.17374146127101e-05, 35.4: 5.227097048805633e-05, 35.5: 5.287470813046535e-05, 35.6: 5.3549285783551295e-05, 35.7: 5.429532226708042e-05, 35.8: 5.511339697700929e-05, 35.9: 5.600404988540669e-05, 36.0: 5.6967781540542134e-05, 36.1: 5.80050530668199e-05, 36.2: 5.911628616482069e-05, 36.3: 6.030186311126e-05, 36.4: 6.156212675905229e-05, 36.5: 6.289738053723293e-05, 36.6: 6.430788845102411e-05, 36.7: 6.57938750817759e-05, 36.8: 6.735552558705289e-05, 36.9: 6.899298570050595e-05, 37.0: 7.070636173201611e-05, 37.1: 7.249572056758011e-05, 37.2: 7.43610896693659e-05, 37.3: 7.630245707568144e-05, 37.4: 7.831977140107874e-05, 37.5: 8.041294183614746e-05, 37.6: 8.258183814769185e-05, 37.7: 8.4826290678729e-05, 37.8: 8.714609034835702e-05, 37.9: 8.954098865183308e-05, 38.0: 9.201069766064975e-05, 38.1: 9.455489002242225e-05, 38.2: 9.717319896084334e-05, 38.3: 9.986521827590536e-05, 38.4: 0.00010263050234367126, 38.5: 0.00010546856611638906}
variable_z_height_temps: {22.0: -0.0009593407991778776,22.1: -0.0009593407991778776,22.2: -0.0009593407991778776,22.3: -0.0009593407991778776, 22.4: -0.0009593407991778776, 22.5: 0.00015635043219474753, 22.6: 0.00014499783794460108, 22.7: 0.00013444541532288813, 22.8: 0.0001246628638141335, 22.9: 0.00011562038525691229, 23.0: 0.00010728868384385175, 23.1: 9.963896612162886e-05, 23.2: 9.264294099097371e-05, 23.3: 8.627281970666504e-05, 23.4: 8.050131587753482e-05, 23.5: 7.530164546646506e-05, 23.6: 7.064752679038894e-05, 23.7: -2.265224787797608e-05, 23.8: -1.527008204480504e-05, 23.9: -8.161620884423429e-06, 24.0: -1.3216329877370242e-06, 24.1: 5.255073630508174e-06, 24.2: 1.1573651531725888e-05, 24.3: 1.7639213853489237e-05, 24.4: 2.3456834309531225e-05, 24.5: 2.903154718974458e-05, 24.6: 3.4368347360181424e-05, 24.7: 3.947219026305377e-05, 24.8: 4.434799191673297e-05, 24.9: 4.900062891575064e-05, 25.0: 5.343493843079725e-05, 25.1: 5.76557182087236e-05, 25.2: 6.166772657254004e-05, 25.3: 6.547568242141588e-05, 25.4: 6.908426523068135e-05, 25.5: 7.249811505182489e-05, 25.6: 7.572183251249595e-05, 25.7: 7.875997881650232e-05, 25.8: 8.161707574381332e-05, 25.9: 8.429760565055542e-05, 26.0: 8.680601146901696e-05, 26.1: 8.914669670764493e-05, 26.2: 9.132402545104497e-05, 26.3: 9.334232235998566e-05, 26.4: 9.5205872671391e-05, 26.5: 9.691892219834816e-05, 26.6: 9.848567733010188e-05, 26.7: 9.991030503205748e-05, 26.8: 0.00010119693284577915, 26.9: 0.0001023496488889923, 27.0: 0.00010337250185557881, 27.1: 0.00010426950101558594, 27.2: 0.00010504461621521372, 27.3: 0.00010570177787682647, 27.4: 0.00010624487699894712, 27.5: 0.00010667776515625683, 27.6: 0.00010700425449959843, 27.7: 0.00010722811775597469, 27.8: 0.00010735308822854483, 27.9: 0.00010738285979663108, 28.0: 0.0001073210869157121, 28.1: 0.00010717138461743001, 28.2: 0.00010693732850958681, 28.3: 0.00010662245477613711, 28.4: 0.00010623026017720283, 28.5: 0.00010576420204906232, 28.6: 0.00010522769830415783, 28.7: 0.00010462412743107805, 28.8: 0.00010395682849459204, 28.9: 0.00010322910113561099, 29.0: 0.00010244420557121298, 29.1: 0.00010160536259463428, 29.2: 0.00010071575357527545, 29.3: 9.977852045868398e-05, 29.4: 9.879676576658464e-05, 29.5: 9.777355259684827e-05, 29.6: 9.671190462351171e-05, 29.7: 9.561480609676914e-05, 29.8: 9.448520184297555e-05, 29.9: 9.332599726464153e-05, 30.0: 9.214005834044629e-05, 30.1: 9.093021162522117e-05, 30.2: 8.96992442499531e-05, 30.3: 8.844990392180979e-05, 30.4: 8.718489892408417e-05, 30.5: 8.59068981162647e-05, 30.6: 8.461853093397805e-05, 30.7: 8.332238738900481e-05, 30.8: 8.20210180693141e-05, 30.9: 8.07169341390055e-05, 31.0: 7.941259275029162e-05, 31.1: 7.811048457183854e-05, 31.2: 7.681291496788433e-05, 31.3: 7.552229575940889e-05, 31.4: 7.424092640327153e-05, 31.5: 7.297108152053405e-05, 31.6: 7.171499630842081e-05, 31.7: 7.047486654033173e-05, 31.8: 6.925284856580238e-05, 31.9: 6.805105931054385e-05, 32.0: 6.687157627642982e-05, 32.1: 6.571643754147392e-05, 32.2: 6.458764175987838e-05, 32.3: 6.348714816197237e-05, 32.4: 6.241687655427278e-05, 32.5: 6.137870731944429e-05, 32.6: 6.037448141629938e-05, 32.7: 5.9406000379842554e-05, 32.8: 5.847502632119663e-05, 32.9: 5.758328192768426e-05, 33.0: 5.673245046275595e-05, 33.1: 5.592417576604121e-05, 33.2: 5.51600622533243e-05, 33.3: 5.444167491653641e-05, 33.4: 5.377053932379902e-05, 33.5: 5.3148141619350185e-05, 33.6: 5.25759285236304e-05, 33.7: 5.205530733321147e-05, 33.8: 5.158764592083642e-05, 33.9: 5.117427273540823e-05, 34.0: 5.081647680198198e-05, 34.1: 5.0515507721780525e-05, 34.2: 5.0272575672184044e-05, 34.3: 5.008885140672485e-05, 34.4: 4.996546625510474e-05, 34.5: 4.990351212319673e-05, 34.6: 4.9904041492991255e-05, 34.7: 4.996806742268989e-05, 34.8: 5.00965635466151e-05, 34.9: 5.029046407526751e-05, 35.0: 5.055066379532243e-05, 35.1: 5.087801806955179e-05, 35.2: 5.127334283698548e-05, 35.3: 5.17374146127101e-05, 35.4: 5.227097048805633e-05, 35.5: 5.287470813046535e-05, 35.6: 5.3549285783551295e-05, 35.7: 5.429532226708042e-05, 35.8: 5.511339697700929e-05, 35.9: 5.600404988540669e-05, 36.0: 5.6967781540542134e-05, 36.1: 5.80050530668199e-05, 36.2: 5.911628616482069e-05, 36.3: 6.030186311126e-05, 36.4: 6.156212675905229e-05, 36.5: 6.289738053723293e-05, 36.6: 6.430788845102411e-05, 36.7: 6.57938750817759e-05, 36.8: 6.735552558705289e-05, 36.9: 6.899298570050595e-05, 37.0: 7.070636173201611e-05, 37.1: 7.249572056758011e-05, 37.2: 7.43610896693659e-05, 37.3: 7.630245707568144e-05, 37.4: 7.831977140107874e-05, 37.5: 8.041294183614746e-05, 37.6: 8.258183814769185e-05, 37.7: 8.4826290678729e-05, 37.8: 8.714609034835702e-05, 37.9: 8.954098865183308e-05, 38.0: 9.201069766064975e-05, 38.1: 9.455489002242225e-05, 38.2: 9.717319896084334e-05, 38.3: 9.986521827590536e-05, 38.4: 0.00010263050234367126, 38.5: 0.00010546856611638906}
#variable_z_height_temps: {22.4: -0.0009593407991778776, 22.5: 0.00015635043219474753, 22.6: 0.00014499783794460108, 22.7: 0.00013444541532288813, 22.8: 0.0001246628638141335, 22.9: 0.00011562038525691229, 23.0: 0.00010728868384385175, 23.1: 9.963896612162886e-05, 23.2: 9.264294099097371e-05, 23.3: 8.627281970666504e-05, 23.4: 8.050131587753482e-05, 23.5: 7.530164546646506e-05, 23.6: 7.064752679038894e-05, 23.7: 6.651318052029167e-05, 23.8: 6.287332968120786e-05, 23.9: 5.9703199652225234e-05, 24.0: 5.6978518166480707e-05,


variable_last_trams: {'stepper_z': 0, 'stepper_z1': 0, 'stepper_z2': 0, 'stepper_z3': 0}
variable_z_trams_temps: {'stepper_z': {}, 'stepper_z1': {}, 'stepper_z2': {}, 'stepper_z3': {}}
variable_enable_tram: 0

variable_temp_min: 22.4
variable_temp_max: 38.5
variable_step: 0.1
variable_precision: 1

############################ DO NOT CHANGE ANYTHING BELOW UNLESS YOU KNOW WHAT YOU ARE DOING ####################################
variable_enable: 1
variable_thermistor_name: "z_thermal_adjust"
variable_last_temp: 0
variable_last_temp_range: []
gcode:
    {% set current_temp = params.CURRENT_TEMP|float %}
    {% set ref_temp = params.REF_TEMP|float %}

    {% set precision = printer["gcode_macro _FDC"].precision %}
    {% set step = printer["gcode_macro _FDC"].step %}

    {% set temp_min = printer["gcode_macro _FDC"].temp_min %}
    {% set temp_max = printer["gcode_macro _FDC"].temp_max %}

    {% if temp_min <= ref_temp <= temp_max and temp_min <= current_temp <= temp_max and current_temp != ref_temp %}
        {% set range_start = (ref_temp * (10 ** precision))|int %}
        {% set range_end = (current_temp * (10 ** precision))|int %}
        {% set range_step = (step * (10 ** precision))|int %}

        {% if range_start > range_end %}
            {% set range_step = range_step * -1 %}
        {% endif %}

        {% set temp_range = namespace(value=[]) %}
        {% for i in range(range_start,range_end + range_step, range_step) %}
            # This is how you append to a list in jinja2 with a namespace...yes...
            {% set temp_range.value = temp_range.value + [i / (10**precision)] %}
        {% endfor %}

        # note to self: can't have a space between the var and value (i.e Malformed command)
        # also for complex types like list and dict you need quotes
        SET_GCODE_VARIABLE MACRO=_FDC VARIABLE=last_temp VALUE={current_temp}
        SET_GCODE_VARIABLE MACRO=_FDC VARIABLE=last_temp_range VALUE="{temp_range.value}"

        {% if printer["gcode_macro _FDC"].enable_tram %}
            _TILT_AND_LOAD_MESH CURRENT_TEMP={current_temp} REF_TEMP={ref_temp}
        {% else %}
            BED_MESH_PROFILE LOAD={current_temp}
            _Z_HEIGHT_ADJUST CURRENT_TEMP={current_temp} REF_TEMP={ref_temp}
        {% endif %}

    {% elif ref_temp != 0 and (ref_temp > temp_max or ref_temp < temp_min) %}
        { action_raise_error("ref_temp or current_temp is out of range "~ref_temp~", "~current_temp) }

    {% endif %}

[gcode_macro _Z_HEIGHT_ADJUST]
variable_last_coeff: 0
gcode:
    {% set total_mm= namespace(value=0) %}
    {% set temp_coeff = namespace(value=0) %}

    {% for temp in printer["gcode_macro _FDC"].last_temp_range %}
        {% set total_mm.value = total_mm.value + printer["gcode_macro _FDC"].z_height_temps[temp|float] %}
    {% endfor %}

    # we take the temp diff abs because the z_thermal_adjust will handle the signs
    # the temp_coeff should be low temp to high temp, it will handle the reverse
    {% set temp_coeff.value = total_mm.value / (params.CURRENT_TEMP|float - params.REF_TEMP|float)|abs %}

    #there is a bug in the comparison of this two floats
    #coudln't for the life of me understand why, so I compare them as strings
    {% if last_coeff|string != temp_coeff.value|string %}
        SET_GCODE_VARIABLE MACRO=_Z_HEIGHT_ADJUST VARIABLE=last_coeff VALUE={temp_coeff.value}
        SET_Z_THERMAL_ADJUST TEMP_COEFF={ temp_coeff.value }
    {% endif %}


[gcode_macro _TILT_AND_LOAD_MESH]
gcode:
    {% if printer["gcode_macro _FDC"].enable_tram %}
        {% if ('applied' in printer.quad_gantry_level and printer.quad_gantry_level.applied) or ('applied' in printer.z_tilt and printer.z_tilt.applied) %}
            {% set current_temp = params.CURRENT_TEMP|float %}
            {% set ref_temp = params.REF_TEMP|float %}

            {% set total_mm= namespace() %}
            {% set total_mm.sign= 1 %}
            {% set total_mm.value= dict() %}
            {% set total_mm.diff= dict() %}
            {% set total_mm.macro_string= "" %}

            {% if current_temp < ref_temp %}
                # If temps are going up we also need to flip the sign
                # to un-tilt the bed mesh (from a the flat position to the reverse tilt position)
                {% set total_mm.sign=-1 %}
            {% endif %}

            {% for stepper, offset in printer["gcode_macro _FDC"].z_trams_temps.items() %}
                {% set _=total_mm.value.__setitem__(stepper, 0) %}
                {% for temp in printer["gcode_macro _FDC"].last_temp_range %}
                    # This is how you set and add an item to a dict in jinja2 with a namespace...yes...
                    {% set _=total_mm.value.__setitem__(stepper,total_mm.value.__getitem__(stepper) + offset[temp|float]) %}
                {% endfor %}
                {% set _=total_mm.value.__setitem__(stepper, total_mm.value.__getitem__(stepper) * total_mm.sign) %}

                # Subtract from the ref temp offset
                # We need to subtract it because this is Z=0 for all steppers
                #{% set _=total_mm.diff.__setitem__(stepper, total_mm.value.__getitem__(stepper) - offset[ref_temp]) %}
            {% endfor %}

            SET_GCODE_VARIABLE MACRO=_FDC variable=last_trams value="{total_mm.value}"

            {% for stepper, stepper_total_mm in total_mm.value.items() %}
                {% set total_mm.macro_string=total_mm.macro_string ~ stepper ~ '=' ~ stepper_total_mm  ~ ' ' %}
            {% endfor %}
            # { action_respond_info("TILT_AND_LOAD String %s" % (total_mm.macro_string)) }
            BED_MESH_PROFILE TILT_AND_LOAD={current_temp} CURRENT_TEMP={current_temp} REF_TEMP={ref_temp} {total_mm.macro_string}
        {% else %}
             {action_respond_info("Tram enabled but the bed is not trammed!")}
        {% endif %}
    {% else %}
         {action_respond_info("TILT_AND_LOAD_MESH called but it's not enabled")}
    {% endif %}


[delayed_gcode RUN_FDC]
initial_duration: 1
gcode:
  {% if printer["gcode_macro _FDC"].temp_min|float == 0.0 or printer["gcode_macro _FDC"].temp_max|float == 999.9  %}
    { action_respond_info("FDC disabled: Stock temperature values present! Modify the config to reflect your own values and restart!") }

  {% elif printer["gcode_macro _FDC"].z_height_temps.999 is defined and printer["gcode_macro _FDC"].z_height_temps.0 == 999 %}
    { action_respond_info("FDC disabled: Stock z heights values present! Modify the config to reflect your own values and restart!") }

  {% elif printer["gcode_macro _FDC"].enable_tram and 'z_tilt' in printer and printer["gcode_macro _FDC"].z_trams_temps.keys()|length != 3 %}
    { action_respond_info("FDC disabled: z_tilt require 3 z steppers to be defined in variable_z_trams_temps!") }

  {% elif printer["gcode_macro _FDC"].enable_tram and 'quad_gantry_level' in printer and printer["gcode_macro _FDC"].z_trams_temps.keys()|length != 4 %}
    { action_respond_info("FDC disabled: quad_gantry_level require 4 z steppers to be defined in variable_z_trams_temps!") }

  {% elif printer["gcode_macro _FDC"].enable_tram and 'z_tilt' in printer and printer["gcode_macro _FDC"].last_trams.keys()|length != 3 %}
    { action_respond_info("FDC disabled: z_tilt require 3 z steppers to be defined variable_last_trams(init to zero)!") }

  {% elif printer["gcode_macro _FDC"].enable_tram and 'quad_gantry_level' in printer and printer["gcode_macro _FDC"].last_trams.keys()|length != 4 %}
    { action_respond_info("FDC disabled: quad_gantry_level require 4 z steppers to be defined in variable_last_trams(init to zero)!") }

  {% else %}
    UPDATE_DELAYED_GCODE ID=RUN_FDC DURATION=10
    {% if printer["gcode_macro _FDC"].enable %}
        {% set precision = printer["gcode_macro _FDC"].precision %}
        {% set step = printer["gcode_macro _FDC"].step %}

        # Rounding current_temp and ref_temp to the step with precision in order to not be affected by small changes
        # This will also improve temp_coeff fluctuation
        {% set ref_temp = printer.z_thermal_adjust.z_adjust_ref_temperature %}
        {% set ref_temp=(ref_temp / step)|round(0) %}
        {% set ref_temp=(ref_temp * step)|round(precision) %}

        {% set current_temp = printer[printer["gcode_macro _FDC"].thermistor_name].temperature|float %}
        {% set current_temp=(current_temp / step)|round(0) %}
        {% set current_temp=(current_temp * step)|round(precision) %}

        {% set last_temp = printer["gcode_macro _FDC"].last_temp %}

        #change the mesh only if it's needed, we don't want to spam klipper with gcodes
        {% if printer.virtual_sdcard.is_active == True and last_temp != current_temp %}
            _FDC CURRENT_TEMP={current_temp} REF_TEMP={ref_temp}
        {% elif printer.virtual_sdcard.is_active == False and last_temp != 0 %}
            {% set last_temp_range_empty=[] %}
            {% set total_mm= namespace() %}
            {% set total_mm.value= dict() %}
            {% for stepper, offset in printer["gcode_macro _FDC"].z_trams_temps.items() %}
                {% set _=total_mm.value.__setitem__(stepper, 0) %}
            {% endfor %}
            # reset the state vars
            SET_GCODE_VARIABLE MACRO=_FDC VARIABLE=last_temp VALUE=0
            SET_GCODE_VARIABLE MACRO=_FDC VARIABLE=last_temp_range VALUE="{last_temp_range_empty}"
            SET_GCODE_VARIABLE MACRO=_FDC variable=last_trams value="{total_mm.value}"
            { action_respond_info("FDC: Resting state vars!\nlast_temp: %s to: %s\nlast_temp_range: %s to: %s\nlast_trams: %s to: %s" % (last_temp, 0, printer["gcode_macro _FDC"].last_temp_range, last_temp_range_empty, printer["gcode_macro _FDC"].last_trams, total_mm.value)) }
        {% endif %}
    {% endif %}
  {% endif %}

[gcode_macro SET_FDC]
gcode:
    #get current state if not provided by params
    {% set ENABLE = params.ENABLE|default(printer["gcode_macro _FDC"].enable)|string %}
    #input checks
    {% if ENABLE == "0" or ENABLE == "1" %}
      {% set enabled = printer["gcode_macro _FDC"].enable %} #current enable status

      {% if not enabled|int == ENABLE|int %}
        SET_GCODE_VARIABLE MACRO=_FDC VARIABLE=enable VALUE={ENABLE}
      {% endif %}
      QUERY_FDC
    {% else %}
      { action_respond_info("Invalid parameter ENABLE value '%s' - must be 0 or 1" % (ENABLE|int)) }
    {% endif %}

[gcode_macro QUERY_FDC]
gcode:
    {% set enabled = printer["gcode_macro _FDC"].enable %}
    {% set last_temp = printer["gcode_macro _FDC"].last_temp %}
    {% set current_mesh = printer.bed_mesh.profile_name %}
    {% set current_temp_coeff = printer["gcode_macro _FDC"].last_coeff %}
    {% set current_last_trams = printer["gcode_macro _FDC"].last_trams %}
    {% set current_z_adjust = printer.z_thermal_adjust.current_z_adjust %}
    {% set ref_temp = printer.z_thermal_adjust.z_adjust_ref_temperature %}
    { action_respond_info("FDC: \n Enabled: %s \n Last temp: %s C \n Mesh profile loaded: %s \n current temp coeff: %s \n current last trams: %s \n current z adjust: %s \n ref_temp: %s" % (enabled, last_temp, current_mesh, current_temp_coeff, current_last_trams, current_z_adjust, ref_temp)) }
